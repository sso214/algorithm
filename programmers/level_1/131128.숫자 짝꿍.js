/*
문제 설명
두 정수 X, Y의 임의의 자리에서 공통으로 나타나는 정수 k(0 ≤ k ≤ 9)들을 이용하여 만들 수 있는 가장 큰 정수를 두 수의 짝꿍이라 합니다
(단, 공통으로 나타나는 정수 중 서로 짝지을 수 있는 숫자만 사용합니다).
X, Y의 짝꿍이 존재하지 않으면, 짝꿍은 -1입니다. X, Y의 짝꿍이 0으로만 구성되어 있다면, 짝꿍은 0입니다.

예를 들어, X = 3403이고 Y = 13203이라면, X와 Y의 짝꿍은 X와 Y에서 공통으로 나타나는 3, 0, 3으로 만들 수 있는 가장 큰 정수인 330입니다.
다른 예시로 X = 5525이고 Y = 1255이면 X와 Y의 짝꿍은 X와 Y에서 공통으로 나타나는 2, 5, 5로 만들 수 있는 가장 큰 정수인 552입니다
(X에는 5가 3개, Y에는 5가 2개 나타나므로 남는 5 한 개는 짝 지을 수 없습니다.)
두 정수 X, Y가 주어졌을 때, X, Y의 짝꿍을 return하는 solution 함수를 완성해주세요.

제한사항
3 ≤ X, Y의 길이(자릿수) ≤ 3,000,000입니다.
X, Y는 0으로 시작하지 않습니다.
X, Y의 짝꿍은 상당히 큰 정수일 수 있으므로, 문자열로 반환합니다.

입출력 예
X	Y	result
"100"	"2345"	"-1"
"100"	"203045"	"0"
"100"	"123450"	"10"
"12321"	"42531"	"321"
"5525"	"1255"	"552"

입출력 예 설명
입출력 예 #1
X, Y의 짝꿍은 존재하지 않습니다. 따라서 "-1"을 return합니다.

입출력 예 #2
X, Y의 공통된 숫자는 0으로만 구성되어 있기 때문에, 두 수의 짝꿍은 정수 0입니다. 따라서 "0"을 return합니다.

입출력 예 #3
X, Y의 짝꿍은 10이므로, "10"을 return합니다.

입출력 예 #4
X, Y의 짝꿍은 321입니다. 따라서 "321"을 return합니다.

입출력 예 #5
지문에 설명된 예시와 같습니다.
*/

/*내 답변 1 (효율성 검사에서 시간초과로 통과하지 못함)*/
function solution1(X, Y){
    let arr = [];
    let [x, y] = X.length < Y.length ? [X, Y] : [Y, X];

    for (let i = 0; i < x.length; i++) {
        const v = x[i];
        if (y.indexOf(v) !== -1) {
            arr.push(v);
            y = y.replace(v, '');
        }
    }

    if (arr.length < 1) return '-1';
    if (arr.every((v) => v === '0')) return '0';
    return arr.sort((a, b) => b - a).join('');
}
/*
와 이거 생각보다 오래 씨름했다.
코드 실행했을 때 테스트케이스를 모두 통과해 쉽게 해결된 줄 알았는데 제출 후 채점을 해보니
11번에서 16번 테스트 케이스에서 시간 초과가 나서 이걸 해결하느라 씨름했다.

여기 제한사항에서 X, Y의 길이는 ≤ 3,000,000라고 되어 있는데
이 부분을 간과한 채로 for문을 그대로 많이 돌리거나, every 문을 사용하는 등 시간 복잡도에 영향을 많이 주는 방식을 택했다.
엄청 헤매다가 결국 질문하기에서 다른 설명을 보고 가이드대로 따라 다시 작성했는데 역시 세상에 천재들은 많구나.
늘 풀던 방식이 아니라 생각지 못했던 다른 방식으로도 한번 생각해보고 다양하게 많은 방식들을 접해봐야곘다.
*/

/*질문하기 예시를 보고 다시 작성한 답변 2*/
function solution2(X, Y) {
    let x = new Array(10).fill(0);
    let y = new Array(10).fill(0);
    const result = [];

    //숫자별 보유 갯수 파악
    X.split('').forEach(n => x[n]++);
    Y.split('').forEach(n => y[n]++);

    //최대 공통 갯수 파악 -> 해당 갯수만큼 숫자 배열에 push
    for(let i=0; i<10; i++) {
        const min = Math.min(x[i], y[i]);
        for(let j=0; j<min; j++) {
            result.push(i);
        }
    }

    //짝궁 숫자 추출 후 예외처리
    if (result.length < 1) return '-1';

    const num = result.sort((a,b) => b-a);
    if (num[0] === 0) return '0';
    return result.join('');
}
